2025/05/14 12:30:07 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.13.2 | packaged by Anaconda, Inc. | (main, Feb  6 2025, 18:49:14) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1207150945
    GPU 0: NVIDIA GeForce RTX 5090 Laptop GPU
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9
    NVCC: Cuda compilation tools, release 12.9, V12.9.41
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.43.34810 版
    GCC: n/a
    PyTorch: 2.8.0.dev20250511+cu128
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930158
  - Intel(R) oneAPI Math Kernel Library Version 2025.1-Product Build 20250306 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.7.1 (Git Hash 8d263e693366ef8db40acc569cc7d8edf644556d)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 12.8
  - NVCC architecture flags: -gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_100,code=sm_100;-gencode;arch=compute_120,code=sm_120
  - CuDNN 90.7.1
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, COMMIT_SHA=c3b3e5230556c7f43e2b313a59001fa2f70044ed, CUDA_VERSION=12.8, CUDNN_VERSION=9.7.1, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/pytorch/.ci/pytorch/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DLIBKINETO_NOXPUPTI=ON -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, TORCH_VERSION=2.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=OFF, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.22.0.dev20250512+cu128
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1207150945
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/14 12:30:08 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=256)
data_preprocessor = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    num_classes=5,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
dataset_type = 'ImageNet'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=100, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='VisualizationHook'))
default_scope = 'mmpretrain'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'C:/Users/39124/Desktop/deek/mmpretrain/checkpoints/resnet101-5d3b4d8f.pth'
log_level = 'INFO'
model = dict(
    backbone=dict(
        depth=101,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch',
        type='ResNet'),
    head=dict(
        in_channels=2048,
        loss=dict(loss_weight=1.0, type='CrossEntropyLoss'),
        num_classes=5,
        topk=1,
        type='LinearClsHead'),
    neck=dict(type='GlobalAveragePooling'),
    type='ImageClassifier')
optim_wrapper = dict(
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0001))
param_scheduler = dict(
    by_epoch=True, gamma=0.1, milestones=[
        30,
        60,
        90,
    ], type='MultiStepLR')
randomness = dict(deterministic=False, seed=None)
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='val.txt',
        classes=
        'C:/Users/39124/Desktop/deek/mmpretrain/data/flower_dataset/classes.txt',
        data_prefix='',
        data_root=
        'C:\\Users\\39124\\Desktop\\deek\\mmpretrain\\data\\flower_dataset',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(edge='short', scale=256, type='ResizeEdge'),
            dict(crop_size=224, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(topk=1, type='Accuracy')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(edge='short', scale=256, type='ResizeEdge'),
    dict(crop_size=224, type='CenterCrop'),
    dict(type='PackInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=100, val_interval=1)
train_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='train.txt',
        classes=
        'C:/Users/39124/Desktop/deek/mmpretrain/data/flower_dataset/classes.txt',
        data_prefix='',
        data_root=
        'C:\\Users\\39124\\Desktop\\deek\\mmpretrain\\data\\flower_dataset',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(scale=224, type='RandomResizedCrop'),
            dict(direction='horizontal', prob=0.5, type='RandomFlip'),
            dict(type='PackInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(scale=224, type='RandomResizedCrop'),
    dict(direction='horizontal', prob=0.5, type='RandomFlip'),
    dict(type='PackInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='val.txt',
        classes=
        'C:/Users/39124/Desktop/deek/mmpretrain/data/flower_dataset/classes.txt',
        data_prefix='',
        data_root=
        'C:\\Users\\39124\\Desktop\\deek\\mmpretrain\\data\\flower_dataset',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(edge='short', scale=256, type='ResizeEdge'),
            dict(crop_size=224, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(topk=1, type='Accuracy')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'C:\\Users\\39124\\Desktop\\deek\\mmpretrain\\checkpoints'

2025/05/14 12:30:09 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/14 12:30:09 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2025/05/14 12:30:11 - mmengine - INFO - Load checkpoint from C:/Users/39124/Desktop/deek/mmpretrain/checkpoints/resnet101-5d3b4d8f.pth
2025/05/14 12:30:11 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/14 12:30:11 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/14 12:30:11 - mmengine - INFO - Checkpoints will be saved to C:\Users\39124\Desktop\deek\mmpretrain\checkpoints.
2025/05/14 12:30:36 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:30:36 - mmengine - INFO - Epoch(train)   [1][72/72]  lr: 1.0000e-03  eta: 0:40:39  time: 0.1188  data_time: 0.0008  memory: 4271  loss: 1.1610
2025/05/14 12:30:36 - mmengine - INFO - Saving checkpoint at 1 epochs
2025/05/14 12:30:57 - mmengine - INFO - Epoch(val) [1][18/18]    accuracy/top1: 51.3986  data_time: 0.9873  time: 1.0383
2025/05/14 12:31:06 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:31:06 - mmengine - INFO - Epoch(train)   [2][72/72]  lr: 1.0000e-03  eta: 0:27:04  time: 0.1125  data_time: 0.0008  memory: 4271  loss: 1.0439
2025/05/14 12:31:06 - mmengine - INFO - Saving checkpoint at 2 epochs
2025/05/14 12:31:09 - mmengine - INFO - Epoch(val) [2][18/18]    accuracy/top1: 53.3217  data_time: 0.0046  time: 0.0466
2025/05/14 12:31:18 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:31:18 - mmengine - INFO - Epoch(train)   [3][72/72]  lr: 1.0000e-03  eta: 0:22:22  time: 0.1109  data_time: 0.0005  memory: 4271  loss: 1.0597
2025/05/14 12:31:18 - mmengine - INFO - Saving checkpoint at 3 epochs
2025/05/14 12:31:21 - mmengine - INFO - Epoch(val) [3][18/18]    accuracy/top1: 57.8671  data_time: 0.0050  time: 0.0459
2025/05/14 12:31:30 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:31:30 - mmengine - INFO - Epoch(train)   [4][72/72]  lr: 1.0000e-03  eta: 0:20:00  time: 0.1118  data_time: 0.0007  memory: 4271  loss: 1.1312
2025/05/14 12:31:30 - mmengine - INFO - Saving checkpoint at 4 epochs
2025/05/14 12:31:33 - mmengine - INFO - Epoch(val) [4][18/18]    accuracy/top1: 63.9860  data_time: 0.0050  time: 0.0460
2025/05/14 12:31:41 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:31:41 - mmengine - INFO - Epoch(train)   [5][72/72]  lr: 1.0000e-03  eta: 0:18:30  time: 0.1114  data_time: 0.0007  memory: 4271  loss: 1.0162
2025/05/14 12:31:41 - mmengine - INFO - Saving checkpoint at 5 epochs
2025/05/14 12:31:44 - mmengine - INFO - Epoch(val) [5][18/18]    accuracy/top1: 61.1888  data_time: 0.0040  time: 0.0448
2025/05/14 12:31:53 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:31:53 - mmengine - INFO - Epoch(train)   [6][72/72]  lr: 1.0000e-03  eta: 0:17:29  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 1.1101
2025/05/14 12:31:53 - mmengine - INFO - Saving checkpoint at 6 epochs
2025/05/14 12:31:56 - mmengine - INFO - Epoch(val) [6][18/18]    accuracy/top1: 66.2587  data_time: 0.0046  time: 0.0455
2025/05/14 12:32:05 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:32:05 - mmengine - INFO - Epoch(train)   [7][72/72]  lr: 1.0000e-03  eta: 0:16:42  time: 0.1122  data_time: 0.0007  memory: 4271  loss: 0.9986
2025/05/14 12:32:05 - mmengine - INFO - Saving checkpoint at 7 epochs
2025/05/14 12:32:08 - mmengine - INFO - Epoch(val) [7][18/18]    accuracy/top1: 62.5874  data_time: 0.0044  time: 0.0460
2025/05/14 12:32:16 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:32:16 - mmengine - INFO - Epoch(train)   [8][72/72]  lr: 1.0000e-03  eta: 0:16:05  time: 0.1123  data_time: 0.0008  memory: 4271  loss: 0.9370
2025/05/14 12:32:16 - mmengine - INFO - Saving checkpoint at 8 epochs
2025/05/14 12:32:20 - mmengine - INFO - Epoch(val) [8][18/18]    accuracy/top1: 68.7063  data_time: 0.0043  time: 0.0458
2025/05/14 12:32:28 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:32:28 - mmengine - INFO - Epoch(train)   [9][72/72]  lr: 1.0000e-03  eta: 0:15:35  time: 0.1130  data_time: 0.0008  memory: 4271  loss: 0.9449
2025/05/14 12:32:28 - mmengine - INFO - Saving checkpoint at 9 epochs
2025/05/14 12:32:32 - mmengine - INFO - Epoch(val) [9][18/18]    accuracy/top1: 67.1329  data_time: 0.0050  time: 0.0459
2025/05/14 12:32:40 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:32:40 - mmengine - INFO - Epoch(train)  [10][72/72]  lr: 1.0000e-03  eta: 0:15:08  time: 0.1115  data_time: 0.0006  memory: 4271  loss: 1.0088
2025/05/14 12:32:40 - mmengine - INFO - Saving checkpoint at 10 epochs
2025/05/14 12:32:43 - mmengine - INFO - Epoch(val) [10][18/18]    accuracy/top1: 67.1329  data_time: 0.0043  time: 0.0451
2025/05/14 12:32:52 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:32:52 - mmengine - INFO - Epoch(train)  [11][72/72]  lr: 1.0000e-03  eta: 0:14:45  time: 0.1124  data_time: 0.0008  memory: 4271  loss: 0.9687
2025/05/14 12:32:52 - mmengine - INFO - Saving checkpoint at 11 epochs
2025/05/14 12:32:56 - mmengine - INFO - Epoch(val) [11][18/18]    accuracy/top1: 68.8811  data_time: 0.0043  time: 0.0453
2025/05/14 12:33:04 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:33:04 - mmengine - INFO - Epoch(train)  [12][72/72]  lr: 1.0000e-03  eta: 0:14:27  time: 0.1129  data_time: 0.0008  memory: 4271  loss: 0.9027
2025/05/14 12:33:04 - mmengine - INFO - Saving checkpoint at 12 epochs
2025/05/14 12:33:08 - mmengine - INFO - Epoch(val) [12][18/18]    accuracy/top1: 70.9790  data_time: 0.0038  time: 0.0449
2025/05/14 12:33:16 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:33:16 - mmengine - INFO - Epoch(train)  [13][72/72]  lr: 1.0000e-03  eta: 0:14:08  time: 0.1119  data_time: 0.0007  memory: 4271  loss: 0.9200
2025/05/14 12:33:16 - mmengine - INFO - Saving checkpoint at 13 epochs
2025/05/14 12:33:20 - mmengine - INFO - Epoch(val) [13][18/18]    accuracy/top1: 72.3776  data_time: 0.0049  time: 0.0475
2025/05/14 12:33:28 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:33:29 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:33:29 - mmengine - INFO - Epoch(train)  [14][72/72]  lr: 1.0000e-03  eta: 0:13:50  time: 0.1117  data_time: 0.0007  memory: 4271  loss: 0.8828
2025/05/14 12:33:29 - mmengine - INFO - Saving checkpoint at 14 epochs
2025/05/14 12:33:33 - mmengine - INFO - Epoch(val) [14][18/18]    accuracy/top1: 72.5525  data_time: 0.0044  time: 0.0468
2025/05/14 12:33:41 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:33:41 - mmengine - INFO - Epoch(train)  [15][72/72]  lr: 1.0000e-03  eta: 0:13:34  time: 0.1119  data_time: 0.0007  memory: 4271  loss: 1.0040
2025/05/14 12:33:41 - mmengine - INFO - Saving checkpoint at 15 epochs
2025/05/14 12:33:44 - mmengine - INFO - Epoch(val) [15][18/18]    accuracy/top1: 73.0769  data_time: 0.0051  time: 0.0462
2025/05/14 12:33:53 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:33:53 - mmengine - INFO - Epoch(train)  [16][72/72]  lr: 1.0000e-03  eta: 0:13:18  time: 0.1117  data_time: 0.0007  memory: 4271  loss: 0.8669
2025/05/14 12:33:53 - mmengine - INFO - Saving checkpoint at 16 epochs
2025/05/14 12:33:56 - mmengine - INFO - Epoch(val) [16][18/18]    accuracy/top1: 69.9301  data_time: 0.0040  time: 0.0453
2025/05/14 12:34:05 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:34:05 - mmengine - INFO - Epoch(train)  [17][72/72]  lr: 1.0000e-03  eta: 0:13:04  time: 0.1117  data_time: 0.0007  memory: 4271  loss: 0.8498
2025/05/14 12:34:05 - mmengine - INFO - Saving checkpoint at 17 epochs
2025/05/14 12:34:08 - mmengine - INFO - Epoch(val) [17][18/18]    accuracy/top1: 73.2517  data_time: 0.0037  time: 0.0444
2025/05/14 12:34:17 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:34:17 - mmengine - INFO - Epoch(train)  [18][72/72]  lr: 1.0000e-03  eta: 0:12:50  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.8527
2025/05/14 12:34:17 - mmengine - INFO - Saving checkpoint at 18 epochs
2025/05/14 12:34:20 - mmengine - INFO - Epoch(val) [18][18/18]    accuracy/top1: 70.6294  data_time: 0.0045  time: 0.0461
2025/05/14 12:34:29 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:34:29 - mmengine - INFO - Epoch(train)  [19][72/72]  lr: 1.0000e-03  eta: 0:12:37  time: 0.1117  data_time: 0.0008  memory: 4271  loss: 0.9067
2025/05/14 12:34:29 - mmengine - INFO - Saving checkpoint at 19 epochs
2025/05/14 12:34:32 - mmengine - INFO - Epoch(val) [19][18/18]    accuracy/top1: 71.3287  data_time: 0.0044  time: 0.0455
2025/05/14 12:34:41 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:34:41 - mmengine - INFO - Epoch(train)  [20][72/72]  lr: 1.0000e-03  eta: 0:12:24  time: 0.1116  data_time: 0.0008  memory: 4271  loss: 0.8455
2025/05/14 12:34:41 - mmengine - INFO - Saving checkpoint at 20 epochs
2025/05/14 12:34:44 - mmengine - INFO - Epoch(val) [20][18/18]    accuracy/top1: 71.8531  data_time: 0.0041  time: 0.0451
2025/05/14 12:34:52 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:34:52 - mmengine - INFO - Epoch(train)  [21][72/72]  lr: 1.0000e-03  eta: 0:12:12  time: 0.1112  data_time: 0.0007  memory: 4271  loss: 0.8675
2025/05/14 12:34:52 - mmengine - INFO - Saving checkpoint at 21 epochs
2025/05/14 12:34:56 - mmengine - INFO - Epoch(val) [21][18/18]    accuracy/top1: 73.6014  data_time: 0.0040  time: 0.0446
2025/05/14 12:35:04 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:35:04 - mmengine - INFO - Epoch(train)  [22][72/72]  lr: 1.0000e-03  eta: 0:12:00  time: 0.1111  data_time: 0.0006  memory: 4271  loss: 0.8687
2025/05/14 12:35:05 - mmengine - INFO - Saving checkpoint at 22 epochs
2025/05/14 12:35:08 - mmengine - INFO - Epoch(val) [22][18/18]    accuracy/top1: 72.0280  data_time: 0.0044  time: 0.0455
2025/05/14 12:35:16 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:35:16 - mmengine - INFO - Epoch(train)  [23][72/72]  lr: 1.0000e-03  eta: 0:11:48  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.8211
2025/05/14 12:35:16 - mmengine - INFO - Saving checkpoint at 23 epochs
2025/05/14 12:35:20 - mmengine - INFO - Epoch(val) [23][18/18]    accuracy/top1: 72.5525  data_time: 0.0038  time: 0.0455
2025/05/14 12:35:28 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:35:28 - mmengine - INFO - Epoch(train)  [24][72/72]  lr: 1.0000e-03  eta: 0:11:36  time: 0.1128  data_time: 0.0007  memory: 4271  loss: 0.8018
2025/05/14 12:35:28 - mmengine - INFO - Saving checkpoint at 24 epochs
2025/05/14 12:35:32 - mmengine - INFO - Epoch(val) [24][18/18]    accuracy/top1: 75.5245  data_time: 0.0040  time: 0.0603
2025/05/14 12:35:40 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:35:40 - mmengine - INFO - Epoch(train)  [25][72/72]  lr: 1.0000e-03  eta: 0:11:25  time: 0.1111  data_time: 0.0007  memory: 4271  loss: 0.8084
2025/05/14 12:35:40 - mmengine - INFO - Saving checkpoint at 25 epochs
2025/05/14 12:35:44 - mmengine - INFO - Epoch(val) [25][18/18]    accuracy/top1: 74.8252  data_time: 0.0040  time: 0.0448
2025/05/14 12:35:52 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:35:52 - mmengine - INFO - Epoch(train)  [26][72/72]  lr: 1.0000e-03  eta: 0:11:14  time: 0.1117  data_time: 0.0007  memory: 4271  loss: 0.8643
2025/05/14 12:35:52 - mmengine - INFO - Saving checkpoint at 26 epochs
2025/05/14 12:35:56 - mmengine - INFO - Epoch(val) [26][18/18]    accuracy/top1: 74.8252  data_time: 0.0040  time: 0.0447
2025/05/14 12:36:04 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:36:04 - mmengine - INFO - Epoch(train)  [27][72/72]  lr: 1.0000e-03  eta: 0:11:03  time: 0.1128  data_time: 0.0009  memory: 4271  loss: 0.8558
2025/05/14 12:36:04 - mmengine - INFO - Saving checkpoint at 27 epochs
2025/05/14 12:36:08 - mmengine - INFO - Epoch(val) [27][18/18]    accuracy/top1: 76.2238  data_time: 0.0038  time: 0.0450
2025/05/14 12:36:14 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:36:16 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:36:16 - mmengine - INFO - Epoch(train)  [28][72/72]  lr: 1.0000e-03  eta: 0:10:52  time: 0.1112  data_time: 0.0007  memory: 4271  loss: 0.7978
2025/05/14 12:36:16 - mmengine - INFO - Saving checkpoint at 28 epochs
2025/05/14 12:36:19 - mmengine - INFO - Epoch(val) [28][18/18]    accuracy/top1: 72.3776  data_time: 0.0049  time: 0.0456
2025/05/14 12:36:28 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:36:28 - mmengine - INFO - Epoch(train)  [29][72/72]  lr: 1.0000e-03  eta: 0:10:42  time: 0.1129  data_time: 0.0009  memory: 4271  loss: 0.8810
2025/05/14 12:36:28 - mmengine - INFO - Saving checkpoint at 29 epochs
2025/05/14 12:36:31 - mmengine - INFO - Epoch(val) [29][18/18]    accuracy/top1: 76.0490  data_time: 0.0054  time: 0.0464
2025/05/14 12:36:39 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:36:39 - mmengine - INFO - Epoch(train)  [30][72/72]  lr: 1.0000e-03  eta: 0:10:32  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.8571
2025/05/14 12:36:40 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/14 12:36:43 - mmengine - INFO - Epoch(val) [30][18/18]    accuracy/top1: 76.3986  data_time: 0.0049  time: 0.0458
2025/05/14 12:36:51 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:36:51 - mmengine - INFO - Epoch(train)  [31][72/72]  lr: 1.0000e-04  eta: 0:10:21  time: 0.1121  data_time: 0.0007  memory: 4271  loss: 0.7602
2025/05/14 12:36:51 - mmengine - INFO - Saving checkpoint at 31 epochs
2025/05/14 12:36:55 - mmengine - INFO - Epoch(val) [31][18/18]    accuracy/top1: 77.2727  data_time: 0.0039  time: 0.0450
2025/05/14 12:37:03 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:37:03 - mmengine - INFO - Epoch(train)  [32][72/72]  lr: 1.0000e-04  eta: 0:10:11  time: 0.1129  data_time: 0.0009  memory: 4271  loss: 0.6652
2025/05/14 12:37:03 - mmengine - INFO - Saving checkpoint at 32 epochs
2025/05/14 12:37:07 - mmengine - INFO - Epoch(val) [32][18/18]    accuracy/top1: 77.4476  data_time: 0.0050  time: 0.0463
2025/05/14 12:37:15 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:37:15 - mmengine - INFO - Epoch(train)  [33][72/72]  lr: 1.0000e-04  eta: 0:10:01  time: 0.1119  data_time: 0.0008  memory: 4271  loss: 0.8675
2025/05/14 12:37:15 - mmengine - INFO - Saving checkpoint at 33 epochs
2025/05/14 12:37:19 - mmengine - INFO - Epoch(val) [33][18/18]    accuracy/top1: 77.6224  data_time: 0.0049  time: 0.0474
2025/05/14 12:37:27 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:37:27 - mmengine - INFO - Epoch(train)  [34][72/72]  lr: 1.0000e-04  eta: 0:09:51  time: 0.1116  data_time: 0.0008  memory: 4271  loss: 0.7502
2025/05/14 12:37:27 - mmengine - INFO - Saving checkpoint at 34 epochs
2025/05/14 12:37:31 - mmengine - INFO - Epoch(val) [34][18/18]    accuracy/top1: 77.4476  data_time: 0.0046  time: 0.0464
2025/05/14 12:37:39 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:37:39 - mmengine - INFO - Epoch(train)  [35][72/72]  lr: 1.0000e-04  eta: 0:09:41  time: 0.1112  data_time: 0.0007  memory: 4271  loss: 0.7868
2025/05/14 12:37:39 - mmengine - INFO - Saving checkpoint at 35 epochs
2025/05/14 12:37:43 - mmengine - INFO - Epoch(val) [35][18/18]    accuracy/top1: 77.9720  data_time: 0.0046  time: 0.0459
2025/05/14 12:37:51 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:37:51 - mmengine - INFO - Epoch(train)  [36][72/72]  lr: 1.0000e-04  eta: 0:09:31  time: 0.1114  data_time: 0.0007  memory: 4271  loss: 0.8698
2025/05/14 12:37:51 - mmengine - INFO - Saving checkpoint at 36 epochs
2025/05/14 12:37:55 - mmengine - INFO - Epoch(val) [36][18/18]    accuracy/top1: 78.3217  data_time: 0.0050  time: 0.0610
2025/05/14 12:38:03 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:38:03 - mmengine - INFO - Epoch(train)  [37][72/72]  lr: 1.0000e-04  eta: 0:09:22  time: 0.1120  data_time: 0.0008  memory: 4271  loss: 0.7420
2025/05/14 12:38:03 - mmengine - INFO - Saving checkpoint at 37 epochs
2025/05/14 12:38:07 - mmengine - INFO - Epoch(val) [37][18/18]    accuracy/top1: 77.4476  data_time: 0.0039  time: 0.0452
2025/05/14 12:38:15 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:38:15 - mmengine - INFO - Epoch(train)  [38][72/72]  lr: 1.0000e-04  eta: 0:09:12  time: 0.1118  data_time: 0.0008  memory: 4271  loss: 0.7781
2025/05/14 12:38:15 - mmengine - INFO - Saving checkpoint at 38 epochs
2025/05/14 12:38:18 - mmengine - INFO - Epoch(val) [38][18/18]    accuracy/top1: 77.2727  data_time: 0.0044  time: 0.0456
2025/05/14 12:38:27 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:38:27 - mmengine - INFO - Epoch(train)  [39][72/72]  lr: 1.0000e-04  eta: 0:09:02  time: 0.1115  data_time: 0.0006  memory: 4271  loss: 0.7411
2025/05/14 12:38:27 - mmengine - INFO - Saving checkpoint at 39 epochs
2025/05/14 12:38:30 - mmengine - INFO - Epoch(val) [39][18/18]    accuracy/top1: 76.7483  data_time: 0.0038  time: 0.0448
2025/05/14 12:38:38 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:38:38 - mmengine - INFO - Epoch(train)  [40][72/72]  lr: 1.0000e-04  eta: 0:08:53  time: 0.1125  data_time: 0.0009  memory: 4271  loss: 0.6907
2025/05/14 12:38:38 - mmengine - INFO - Saving checkpoint at 40 epochs
2025/05/14 12:38:41 - mmengine - INFO - Epoch(val) [40][18/18]    accuracy/top1: 76.7483  data_time: 0.0041  time: 0.0450
2025/05/14 12:38:50 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:38:50 - mmengine - INFO - Epoch(train)  [41][72/72]  lr: 1.0000e-04  eta: 0:08:43  time: 0.1122  data_time: 0.0009  memory: 4271  loss: 0.7482
2025/05/14 12:38:50 - mmengine - INFO - Saving checkpoint at 41 epochs
2025/05/14 12:38:53 - mmengine - INFO - Epoch(val) [41][18/18]    accuracy/top1: 77.9720  data_time: 0.0045  time: 0.0458
2025/05/14 12:38:59 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:39:02 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:39:02 - mmengine - INFO - Epoch(train)  [42][72/72]  lr: 1.0000e-04  eta: 0:08:34  time: 0.1117  data_time: 0.0008  memory: 4271  loss: 0.6017
2025/05/14 12:39:02 - mmengine - INFO - Saving checkpoint at 42 epochs
2025/05/14 12:39:05 - mmengine - INFO - Epoch(val) [42][18/18]    accuracy/top1: 77.6224  data_time: 0.0050  time: 0.0464
2025/05/14 12:39:14 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:39:14 - mmengine - INFO - Epoch(train)  [43][72/72]  lr: 1.0000e-04  eta: 0:08:25  time: 0.1121  data_time: 0.0007  memory: 4271  loss: 0.7558
2025/05/14 12:39:14 - mmengine - INFO - Saving checkpoint at 43 epochs
2025/05/14 12:39:17 - mmengine - INFO - Epoch(val) [43][18/18]    accuracy/top1: 76.5734  data_time: 0.0047  time: 0.0459
2025/05/14 12:39:26 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:39:26 - mmengine - INFO - Epoch(train)  [44][72/72]  lr: 1.0000e-04  eta: 0:08:15  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.7847
2025/05/14 12:39:26 - mmengine - INFO - Saving checkpoint at 44 epochs
2025/05/14 12:39:29 - mmengine - INFO - Epoch(val) [44][18/18]    accuracy/top1: 78.1469  data_time: 0.0048  time: 0.0453
2025/05/14 12:39:37 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:39:37 - mmengine - INFO - Epoch(train)  [45][72/72]  lr: 1.0000e-04  eta: 0:08:06  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.6120
2025/05/14 12:39:37 - mmengine - INFO - Saving checkpoint at 45 epochs
2025/05/14 12:39:41 - mmengine - INFO - Epoch(val) [45][18/18]    accuracy/top1: 78.3217  data_time: 0.0037  time: 0.0446
2025/05/14 12:39:50 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:39:50 - mmengine - INFO - Epoch(train)  [46][72/72]  lr: 1.0000e-04  eta: 0:07:57  time: 0.1118  data_time: 0.0007  memory: 4271  loss: 0.8116
2025/05/14 12:39:50 - mmengine - INFO - Saving checkpoint at 46 epochs
2025/05/14 12:39:53 - mmengine - INFO - Epoch(val) [46][18/18]    accuracy/top1: 79.1958  data_time: 0.0039  time: 0.0452
2025/05/14 12:40:01 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:40:01 - mmengine - INFO - Epoch(train)  [47][72/72]  lr: 1.0000e-04  eta: 0:07:47  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.7713
2025/05/14 12:40:01 - mmengine - INFO - Saving checkpoint at 47 epochs
2025/05/14 12:40:05 - mmengine - INFO - Epoch(val) [47][18/18]    accuracy/top1: 77.4476  data_time: 0.0048  time: 0.0470
2025/05/14 12:40:13 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:40:13 - mmengine - INFO - Epoch(train)  [48][72/72]  lr: 1.0000e-04  eta: 0:07:38  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.7019
2025/05/14 12:40:13 - mmengine - INFO - Saving checkpoint at 48 epochs
2025/05/14 12:40:17 - mmengine - INFO - Epoch(val) [48][18/18]    accuracy/top1: 77.6224  data_time: 0.0049  time: 0.0604
2025/05/14 12:40:25 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:40:25 - mmengine - INFO - Epoch(train)  [49][72/72]  lr: 1.0000e-04  eta: 0:07:29  time: 0.1128  data_time: 0.0008  memory: 4271  loss: 0.8149
2025/05/14 12:40:25 - mmengine - INFO - Saving checkpoint at 49 epochs
2025/05/14 12:40:29 - mmengine - INFO - Epoch(val) [49][18/18]    accuracy/top1: 77.0979  data_time: 0.0041  time: 0.0452
2025/05/14 12:40:37 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:40:37 - mmengine - INFO - Epoch(train)  [50][72/72]  lr: 1.0000e-04  eta: 0:07:20  time: 0.1114  data_time: 0.0007  memory: 4271  loss: 0.8584
2025/05/14 12:40:37 - mmengine - INFO - Saving checkpoint at 50 epochs
2025/05/14 12:40:41 - mmengine - INFO - Epoch(val) [50][18/18]    accuracy/top1: 77.0979  data_time: 0.0048  time: 0.0458
2025/05/14 12:40:49 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:40:49 - mmengine - INFO - Epoch(train)  [51][72/72]  lr: 1.0000e-04  eta: 0:07:11  time: 0.1113  data_time: 0.0007  memory: 4271  loss: 0.8451
2025/05/14 12:40:49 - mmengine - INFO - Saving checkpoint at 51 epochs
2025/05/14 12:40:53 - mmengine - INFO - Epoch(val) [51][18/18]    accuracy/top1: 77.9720  data_time: 0.0040  time: 0.0448
2025/05/14 12:41:01 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:41:01 - mmengine - INFO - Epoch(train)  [52][72/72]  lr: 1.0000e-04  eta: 0:07:02  time: 0.1117  data_time: 0.0007  memory: 4271  loss: 0.7409
2025/05/14 12:41:01 - mmengine - INFO - Saving checkpoint at 52 epochs
2025/05/14 12:41:05 - mmengine - INFO - Epoch(val) [52][18/18]    accuracy/top1: 78.6713  data_time: 0.0042  time: 0.0454
2025/05/14 12:41:13 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:41:13 - mmengine - INFO - Epoch(train)  [53][72/72]  lr: 1.0000e-04  eta: 0:06:53  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.6879
2025/05/14 12:41:13 - mmengine - INFO - Saving checkpoint at 53 epochs
2025/05/14 12:41:16 - mmengine - INFO - Epoch(val) [53][18/18]    accuracy/top1: 77.0979  data_time: 0.0036  time: 0.0458
2025/05/14 12:41:25 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:41:25 - mmengine - INFO - Epoch(train)  [54][72/72]  lr: 1.0000e-04  eta: 0:06:43  time: 0.1113  data_time: 0.0007  memory: 4271  loss: 0.7081
2025/05/14 12:41:25 - mmengine - INFO - Saving checkpoint at 54 epochs
2025/05/14 12:41:28 - mmengine - INFO - Epoch(val) [54][18/18]    accuracy/top1: 76.9231  data_time: 0.0043  time: 0.0450
2025/05/14 12:41:36 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:41:36 - mmengine - INFO - Epoch(train)  [55][72/72]  lr: 1.0000e-04  eta: 0:06:34  time: 0.1113  data_time: 0.0007  memory: 4271  loss: 0.7482
2025/05/14 12:41:37 - mmengine - INFO - Saving checkpoint at 55 epochs
2025/05/14 12:41:40 - mmengine - INFO - Epoch(val) [55][18/18]    accuracy/top1: 77.2727  data_time: 0.0040  time: 0.0454
2025/05/14 12:41:45 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:41:49 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:41:49 - mmengine - INFO - Epoch(train)  [56][72/72]  lr: 1.0000e-04  eta: 0:06:25  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.6656
2025/05/14 12:41:49 - mmengine - INFO - Saving checkpoint at 56 epochs
2025/05/14 12:41:52 - mmengine - INFO - Epoch(val) [56][18/18]    accuracy/top1: 77.2727  data_time: 0.0041  time: 0.0452
2025/05/14 12:42:00 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:42:00 - mmengine - INFO - Epoch(train)  [57][72/72]  lr: 1.0000e-04  eta: 0:06:16  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.9322
2025/05/14 12:42:00 - mmengine - INFO - Saving checkpoint at 57 epochs
2025/05/14 12:42:03 - mmengine - INFO - Epoch(val) [57][18/18]    accuracy/top1: 77.4476  data_time: 0.0039  time: 0.0450
2025/05/14 12:42:12 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:42:12 - mmengine - INFO - Epoch(train)  [58][72/72]  lr: 1.0000e-04  eta: 0:06:07  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.7543
2025/05/14 12:42:12 - mmengine - INFO - Saving checkpoint at 58 epochs
2025/05/14 12:42:15 - mmengine - INFO - Epoch(val) [58][18/18]    accuracy/top1: 78.1469  data_time: 0.0044  time: 0.0450
2025/05/14 12:42:24 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:42:24 - mmengine - INFO - Epoch(train)  [59][72/72]  lr: 1.0000e-04  eta: 0:05:59  time: 0.1121  data_time: 0.0008  memory: 4271  loss: 0.7486
2025/05/14 12:42:24 - mmengine - INFO - Saving checkpoint at 59 epochs
2025/05/14 12:42:27 - mmengine - INFO - Epoch(val) [59][18/18]    accuracy/top1: 78.1469  data_time: 0.0046  time: 0.0460
2025/05/14 12:42:36 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:42:36 - mmengine - INFO - Epoch(train)  [60][72/72]  lr: 1.0000e-04  eta: 0:05:50  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.6046
2025/05/14 12:42:36 - mmengine - INFO - Saving checkpoint at 60 epochs
2025/05/14 12:42:39 - mmengine - INFO - Epoch(val) [60][18/18]    accuracy/top1: 77.9720  data_time: 0.0048  time: 0.0589
2025/05/14 12:42:48 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:42:48 - mmengine - INFO - Epoch(train)  [61][72/72]  lr: 1.0000e-05  eta: 0:05:41  time: 0.1114  data_time: 0.0006  memory: 4271  loss: 0.6754
2025/05/14 12:42:48 - mmengine - INFO - Saving checkpoint at 61 epochs
2025/05/14 12:42:51 - mmengine - INFO - Epoch(val) [61][18/18]    accuracy/top1: 77.9720  data_time: 0.0041  time: 0.0464
2025/05/14 12:42:59 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:42:59 - mmengine - INFO - Epoch(train)  [62][72/72]  lr: 1.0000e-05  eta: 0:05:32  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.8688
2025/05/14 12:42:59 - mmengine - INFO - Saving checkpoint at 62 epochs
2025/05/14 12:43:03 - mmengine - INFO - Epoch(val) [62][18/18]    accuracy/top1: 77.6224  data_time: 0.0038  time: 0.0449
2025/05/14 12:43:12 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:43:12 - mmengine - INFO - Epoch(train)  [63][72/72]  lr: 1.0000e-05  eta: 0:05:23  time: 0.1114  data_time: 0.0007  memory: 4271  loss: 0.8892
2025/05/14 12:43:12 - mmengine - INFO - Saving checkpoint at 63 epochs
2025/05/14 12:43:15 - mmengine - INFO - Epoch(val) [63][18/18]    accuracy/top1: 78.8462  data_time: 0.0043  time: 0.0461
2025/05/14 12:43:23 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:43:23 - mmengine - INFO - Epoch(train)  [64][72/72]  lr: 1.0000e-05  eta: 0:05:14  time: 0.1121  data_time: 0.0007  memory: 4271  loss: 0.7841
2025/05/14 12:43:23 - mmengine - INFO - Saving checkpoint at 64 epochs
2025/05/14 12:43:26 - mmengine - INFO - Epoch(val) [64][18/18]    accuracy/top1: 77.9720  data_time: 0.0048  time: 0.0456
2025/05/14 12:43:35 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:43:35 - mmengine - INFO - Epoch(train)  [65][72/72]  lr: 1.0000e-05  eta: 0:05:05  time: 0.1113  data_time: 0.0007  memory: 4271  loss: 0.7294
2025/05/14 12:43:35 - mmengine - INFO - Saving checkpoint at 65 epochs
2025/05/14 12:43:38 - mmengine - INFO - Epoch(val) [65][18/18]    accuracy/top1: 77.6224  data_time: 0.0039  time: 0.0450
2025/05/14 12:43:47 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:43:47 - mmengine - INFO - Epoch(train)  [66][72/72]  lr: 1.0000e-05  eta: 0:04:56  time: 0.1115  data_time: 0.0006  memory: 4271  loss: 0.7614
2025/05/14 12:43:47 - mmengine - INFO - Saving checkpoint at 66 epochs
2025/05/14 12:43:50 - mmengine - INFO - Epoch(val) [66][18/18]    accuracy/top1: 78.4965  data_time: 0.0053  time: 0.0463
2025/05/14 12:43:59 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:43:59 - mmengine - INFO - Epoch(train)  [67][72/72]  lr: 1.0000e-05  eta: 0:04:47  time: 0.1118  data_time: 0.0007  memory: 4271  loss: 0.8106
2025/05/14 12:43:59 - mmengine - INFO - Saving checkpoint at 67 epochs
2025/05/14 12:44:02 - mmengine - INFO - Epoch(val) [67][18/18]    accuracy/top1: 78.1469  data_time: 0.0036  time: 0.0443
2025/05/14 12:44:10 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:44:10 - mmengine - INFO - Epoch(train)  [68][72/72]  lr: 1.0000e-05  eta: 0:04:39  time: 0.1113  data_time: 0.0007  memory: 4271  loss: 0.6698
2025/05/14 12:44:10 - mmengine - INFO - Saving checkpoint at 68 epochs
2025/05/14 12:44:14 - mmengine - INFO - Epoch(val) [68][18/18]    accuracy/top1: 78.6713  data_time: 0.0036  time: 0.0448
2025/05/14 12:44:22 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:44:22 - mmengine - INFO - Epoch(train)  [69][72/72]  lr: 1.0000e-05  eta: 0:04:30  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.6366
2025/05/14 12:44:22 - mmengine - INFO - Saving checkpoint at 69 epochs
2025/05/14 12:44:25 - mmengine - INFO - Epoch(val) [69][18/18]    accuracy/top1: 77.9720  data_time: 0.0041  time: 0.0464
2025/05/14 12:44:29 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:44:34 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:44:34 - mmengine - INFO - Epoch(train)  [70][72/72]  lr: 1.0000e-05  eta: 0:04:21  time: 0.1114  data_time: 0.0007  memory: 4271  loss: 0.6581
2025/05/14 12:44:34 - mmengine - INFO - Saving checkpoint at 70 epochs
2025/05/14 12:44:37 - mmengine - INFO - Epoch(val) [70][18/18]    accuracy/top1: 77.7972  data_time: 0.0047  time: 0.0456
2025/05/14 12:44:46 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:44:46 - mmengine - INFO - Epoch(train)  [71][72/72]  lr: 1.0000e-05  eta: 0:04:12  time: 0.1122  data_time: 0.0008  memory: 4271  loss: 0.7823
2025/05/14 12:44:46 - mmengine - INFO - Saving checkpoint at 71 epochs
2025/05/14 12:44:49 - mmengine - INFO - Epoch(val) [71][18/18]    accuracy/top1: 78.3217  data_time: 0.0048  time: 0.0462
2025/05/14 12:44:57 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:44:57 - mmengine - INFO - Epoch(train)  [72][72/72]  lr: 1.0000e-05  eta: 0:04:03  time: 0.1116  data_time: 0.0006  memory: 4271  loss: 0.8462
2025/05/14 12:44:57 - mmengine - INFO - Saving checkpoint at 72 epochs
2025/05/14 12:45:01 - mmengine - INFO - Epoch(val) [72][18/18]    accuracy/top1: 78.8462  data_time: 0.0042  time: 0.0609
2025/05/14 12:45:10 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:45:10 - mmengine - INFO - Epoch(train)  [73][72/72]  lr: 1.0000e-05  eta: 0:03:54  time: 0.1128  data_time: 0.0008  memory: 4271  loss: 0.7255
2025/05/14 12:45:10 - mmengine - INFO - Saving checkpoint at 73 epochs
2025/05/14 12:45:13 - mmengine - INFO - Epoch(val) [73][18/18]    accuracy/top1: 77.6224  data_time: 0.0049  time: 0.0458
2025/05/14 12:45:22 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:45:22 - mmengine - INFO - Epoch(train)  [74][72/72]  lr: 1.0000e-05  eta: 0:03:46  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.7178
2025/05/14 12:45:22 - mmengine - INFO - Saving checkpoint at 74 epochs
2025/05/14 12:45:25 - mmengine - INFO - Epoch(val) [74][18/18]    accuracy/top1: 77.9720  data_time: 0.0038  time: 0.0451
2025/05/14 12:45:33 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:45:33 - mmengine - INFO - Epoch(train)  [75][72/72]  lr: 1.0000e-05  eta: 0:03:37  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.7049
2025/05/14 12:45:33 - mmengine - INFO - Saving checkpoint at 75 epochs
2025/05/14 12:45:37 - mmengine - INFO - Epoch(val) [75][18/18]    accuracy/top1: 77.7972  data_time: 0.0049  time: 0.0461
2025/05/14 12:45:45 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:45:45 - mmengine - INFO - Epoch(train)  [76][72/72]  lr: 1.0000e-05  eta: 0:03:28  time: 0.1117  data_time: 0.0006  memory: 4271  loss: 0.6825
2025/05/14 12:45:45 - mmengine - INFO - Saving checkpoint at 76 epochs
2025/05/14 12:45:48 - mmengine - INFO - Epoch(val) [76][18/18]    accuracy/top1: 77.9720  data_time: 0.0040  time: 0.0452
2025/05/14 12:45:57 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:45:57 - mmengine - INFO - Epoch(train)  [77][72/72]  lr: 1.0000e-05  eta: 0:03:19  time: 0.1115  data_time: 0.0006  memory: 4271  loss: 0.7606
2025/05/14 12:45:57 - mmengine - INFO - Saving checkpoint at 77 epochs
2025/05/14 12:46:00 - mmengine - INFO - Epoch(val) [77][18/18]    accuracy/top1: 77.9720  data_time: 0.0037  time: 0.0449
2025/05/14 12:46:09 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:46:09 - mmengine - INFO - Epoch(train)  [78][72/72]  lr: 1.0000e-05  eta: 0:03:11  time: 0.1120  data_time: 0.0006  memory: 4271  loss: 1.0695
2025/05/14 12:46:09 - mmengine - INFO - Saving checkpoint at 78 epochs
2025/05/14 12:46:12 - mmengine - INFO - Epoch(val) [78][18/18]    accuracy/top1: 77.7972  data_time: 0.0036  time: 0.0452
2025/05/14 12:46:20 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:46:20 - mmengine - INFO - Epoch(train)  [79][72/72]  lr: 1.0000e-05  eta: 0:03:02  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.7425
2025/05/14 12:46:20 - mmengine - INFO - Saving checkpoint at 79 epochs
2025/05/14 12:46:23 - mmengine - INFO - Epoch(val) [79][18/18]    accuracy/top1: 77.9720  data_time: 0.0045  time: 0.0457
2025/05/14 12:46:32 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:46:32 - mmengine - INFO - Epoch(train)  [80][72/72]  lr: 1.0000e-05  eta: 0:02:53  time: 0.1121  data_time: 0.0007  memory: 4271  loss: 0.6955
2025/05/14 12:46:32 - mmengine - INFO - Saving checkpoint at 80 epochs
2025/05/14 12:46:35 - mmengine - INFO - Epoch(val) [80][18/18]    accuracy/top1: 77.4476  data_time: 0.0048  time: 0.0462
2025/05/14 12:46:44 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:46:44 - mmengine - INFO - Epoch(train)  [81][72/72]  lr: 1.0000e-05  eta: 0:02:44  time: 0.1120  data_time: 0.0006  memory: 4271  loss: 0.7577
2025/05/14 12:46:44 - mmengine - INFO - Saving checkpoint at 81 epochs
2025/05/14 12:46:47 - mmengine - INFO - Epoch(val) [81][18/18]    accuracy/top1: 78.3217  data_time: 0.0048  time: 0.0459
2025/05/14 12:46:55 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:46:55 - mmengine - INFO - Epoch(train)  [82][72/72]  lr: 1.0000e-05  eta: 0:02:36  time: 0.1115  data_time: 0.0006  memory: 4271  loss: 0.7198
2025/05/14 12:46:55 - mmengine - INFO - Saving checkpoint at 82 epochs
2025/05/14 12:46:58 - mmengine - INFO - Epoch(val) [82][18/18]    accuracy/top1: 78.8462  data_time: 0.0047  time: 0.0456
2025/05/14 12:47:07 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:47:07 - mmengine - INFO - Epoch(train)  [83][72/72]  lr: 1.0000e-05  eta: 0:02:27  time: 0.1117  data_time: 0.0007  memory: 4271  loss: 0.7751
2025/05/14 12:47:07 - mmengine - INFO - Saving checkpoint at 83 epochs
2025/05/14 12:47:10 - mmengine - INFO - Epoch(val) [83][18/18]    accuracy/top1: 77.6224  data_time: 0.0040  time: 0.0449
2025/05/14 12:47:13 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:47:19 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:47:19 - mmengine - INFO - Epoch(train)  [84][72/72]  lr: 1.0000e-05  eta: 0:02:18  time: 0.1114  data_time: 0.0007  memory: 4271  loss: 0.7370
2025/05/14 12:47:19 - mmengine - INFO - Saving checkpoint at 84 epochs
2025/05/14 12:47:22 - mmengine - INFO - Epoch(val) [84][18/18]    accuracy/top1: 78.1469  data_time: 0.0047  time: 0.0607
2025/05/14 12:47:30 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:47:30 - mmengine - INFO - Epoch(train)  [85][72/72]  lr: 1.0000e-05  eta: 0:02:10  time: 0.1111  data_time: 0.0006  memory: 4271  loss: 0.8461
2025/05/14 12:47:30 - mmengine - INFO - Saving checkpoint at 85 epochs
2025/05/14 12:47:34 - mmengine - INFO - Epoch(val) [85][18/18]    accuracy/top1: 77.9720  data_time: 0.0039  time: 0.0453
2025/05/14 12:47:42 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:47:42 - mmengine - INFO - Epoch(train)  [86][72/72]  lr: 1.0000e-05  eta: 0:02:01  time: 0.1116  data_time: 0.0007  memory: 4271  loss: 0.6152
2025/05/14 12:47:42 - mmengine - INFO - Saving checkpoint at 86 epochs
2025/05/14 12:47:46 - mmengine - INFO - Epoch(val) [86][18/18]    accuracy/top1: 78.6713  data_time: 0.0047  time: 0.0452
2025/05/14 12:47:54 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:47:54 - mmengine - INFO - Epoch(train)  [87][72/72]  lr: 1.0000e-05  eta: 0:01:52  time: 0.1119  data_time: 0.0007  memory: 4271  loss: 0.7793
2025/05/14 12:47:54 - mmengine - INFO - Saving checkpoint at 87 epochs
2025/05/14 12:47:58 - mmengine - INFO - Epoch(val) [87][18/18]    accuracy/top1: 78.8462  data_time: 0.0041  time: 0.0452
2025/05/14 12:48:06 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:48:06 - mmengine - INFO - Epoch(train)  [88][72/72]  lr: 1.0000e-05  eta: 0:01:43  time: 0.1117  data_time: 0.0007  memory: 4271  loss: 0.6373
2025/05/14 12:48:06 - mmengine - INFO - Saving checkpoint at 88 epochs
2025/05/14 12:48:09 - mmengine - INFO - Epoch(val) [88][18/18]    accuracy/top1: 77.6224  data_time: 0.0047  time: 0.0467
2025/05/14 12:48:18 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:48:18 - mmengine - INFO - Epoch(train)  [89][72/72]  lr: 1.0000e-05  eta: 0:01:35  time: 0.1117  data_time: 0.0007  memory: 4271  loss: 0.7915
2025/05/14 12:48:18 - mmengine - INFO - Saving checkpoint at 89 epochs
2025/05/14 12:48:21 - mmengine - INFO - Epoch(val) [89][18/18]    accuracy/top1: 77.9720  data_time: 0.0036  time: 0.0447
2025/05/14 12:48:29 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:48:29 - mmengine - INFO - Epoch(train)  [90][72/72]  lr: 1.0000e-05  eta: 0:01:26  time: 0.1113  data_time: 0.0007  memory: 4271  loss: 0.6962
2025/05/14 12:48:30 - mmengine - INFO - Saving checkpoint at 90 epochs
2025/05/14 12:48:33 - mmengine - INFO - Epoch(val) [90][18/18]    accuracy/top1: 77.9720  data_time: 0.0047  time: 0.0453
2025/05/14 12:48:41 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:48:41 - mmengine - INFO - Epoch(train)  [91][72/72]  lr: 1.0000e-06  eta: 0:01:17  time: 0.1112  data_time: 0.0006  memory: 4271  loss: 0.7587
2025/05/14 12:48:41 - mmengine - INFO - Saving checkpoint at 91 epochs
2025/05/14 12:48:44 - mmengine - INFO - Epoch(val) [91][18/18]    accuracy/top1: 78.1469  data_time: 0.0046  time: 0.0452
2025/05/14 12:48:53 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:48:53 - mmengine - INFO - Epoch(train)  [92][72/72]  lr: 1.0000e-06  eta: 0:01:09  time: 0.1113  data_time: 0.0007  memory: 4271  loss: 0.6909
2025/05/14 12:48:53 - mmengine - INFO - Saving checkpoint at 92 epochs
2025/05/14 12:48:56 - mmengine - INFO - Epoch(val) [92][18/18]    accuracy/top1: 78.3217  data_time: 0.0040  time: 0.0453
2025/05/14 12:49:04 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:49:04 - mmengine - INFO - Epoch(train)  [93][72/72]  lr: 1.0000e-06  eta: 0:01:00  time: 0.1125  data_time: 0.0007  memory: 4271  loss: 0.6875
2025/05/14 12:49:04 - mmengine - INFO - Saving checkpoint at 93 epochs
2025/05/14 12:49:08 - mmengine - INFO - Epoch(val) [93][18/18]    accuracy/top1: 77.7972  data_time: 0.0037  time: 0.0444
2025/05/14 12:49:16 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:49:16 - mmengine - INFO - Epoch(train)  [94][72/72]  lr: 1.0000e-06  eta: 0:00:51  time: 0.1119  data_time: 0.0006  memory: 4271  loss: 0.6435
2025/05/14 12:49:16 - mmengine - INFO - Saving checkpoint at 94 epochs
2025/05/14 12:49:19 - mmengine - INFO - Epoch(val) [94][18/18]    accuracy/top1: 77.7972  data_time: 0.0036  time: 0.0446
2025/05/14 12:49:28 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:49:28 - mmengine - INFO - Epoch(train)  [95][72/72]  lr: 1.0000e-06  eta: 0:00:43  time: 0.1121  data_time: 0.0007  memory: 4271  loss: 0.6901
2025/05/14 12:49:28 - mmengine - INFO - Saving checkpoint at 95 epochs
2025/05/14 12:49:31 - mmengine - INFO - Epoch(val) [95][18/18]    accuracy/top1: 78.4965  data_time: 0.0041  time: 0.0455
2025/05/14 12:49:39 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:49:39 - mmengine - INFO - Epoch(train)  [96][72/72]  lr: 1.0000e-06  eta: 0:00:34  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.6546
2025/05/14 12:49:39 - mmengine - INFO - Saving checkpoint at 96 epochs
2025/05/14 12:49:43 - mmengine - INFO - Epoch(val) [96][18/18]    accuracy/top1: 76.5734  data_time: 0.0046  time: 0.0620
2025/05/14 12:49:51 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:49:51 - mmengine - INFO - Epoch(train)  [97][72/72]  lr: 1.0000e-06  eta: 0:00:25  time: 0.1114  data_time: 0.0007  memory: 4271  loss: 0.7666
2025/05/14 12:49:52 - mmengine - INFO - Saving checkpoint at 97 epochs
2025/05/14 12:49:55 - mmengine - INFO - Epoch(val) [97][18/18]    accuracy/top1: 77.7972  data_time: 0.0049  time: 0.0460
2025/05/14 12:49:57 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:50:03 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:50:03 - mmengine - INFO - Epoch(train)  [98][72/72]  lr: 1.0000e-06  eta: 0:00:17  time: 0.1119  data_time: 0.0007  memory: 4271  loss: 0.6770
2025/05/14 12:50:03 - mmengine - INFO - Saving checkpoint at 98 epochs
2025/05/14 12:50:07 - mmengine - INFO - Epoch(val) [98][18/18]    accuracy/top1: 77.6224  data_time: 0.0048  time: 0.0457
2025/05/14 12:50:15 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:50:15 - mmengine - INFO - Epoch(train)  [99][72/72]  lr: 1.0000e-06  eta: 0:00:08  time: 0.1115  data_time: 0.0007  memory: 4271  loss: 0.7256
2025/05/14 12:50:15 - mmengine - INFO - Saving checkpoint at 99 epochs
2025/05/14 12:50:18 - mmengine - INFO - Epoch(val) [99][18/18]    accuracy/top1: 78.3217  data_time: 0.0046  time: 0.0455
2025/05/14 12:50:27 - mmengine - INFO - Exp name: resnet101_8xb32_in1k_20250514_123002
2025/05/14 12:50:27 - mmengine - INFO - Epoch(train) [100][72/72]  lr: 1.0000e-06  eta: 0:00:00  time: 0.1114  data_time: 0.0007  memory: 4271  loss: 0.7617
2025/05/14 12:50:27 - mmengine - INFO - Saving checkpoint at 100 epochs
2025/05/14 12:50:30 - mmengine - INFO - Epoch(val) [100][18/18]    accuracy/top1: 78.6713  data_time: 0.0041  time: 0.0461
